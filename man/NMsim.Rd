% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NMsim.R
\name{NMsim}
\alias{NMsim}
\title{Run simulations from an estimated Nonmem model}
\usage{
NMsim(
  path.mod,
  data,
  dir.sim,
  name.sim,
  order.columns = TRUE,
  script = NULL,
  subproblems,
  reuse.results = FALSE,
  seed,
  args.psn.execute,
  nmquiet = FALSE,
  text.table,
  type.mod,
  type.sim,
  execute = TRUE,
  sge = FALSE,
  transform = NULL,
  type.input,
  method.execute,
  method.update.inits,
  create.dir = TRUE,
  dir.psn,
  path.nonmem = NULL,
  as.fun,
  suffix.sim
)
}
\arguments{
\item{path.mod}{Path to the input control stream to run the
simulation on. The outpult control stream is for now assumed
to be stored next to the input control stream and ending in
.lst instead of .modl}

\item{data}{The simulation data as a data.frame.}

\item{dir.sim}{The directory in which NMsim will store all
generated files.}

\item{name.sim}{Give all filenames related to the simulation a
suffix. A short string describing the sim is recommended like
"ph3_regimens".}

\item{order.columns}{reorder columns by calling
NMdata::NMorderColumns before saving dataset and running
simulations? Default is TRUE.}

\item{script}{The path to the script where this is run. For
stamping of dataset so results can be traced back to code.}

\item{subproblems}{Number of subproblems to use as SUBPROBLEMS in
$SIMULATION block in Nonmem. The default is subproblem=0 which
means not to use SUBPROBLEMS.}

\item{reuse.results}{If simulation results found on file, should
they be used? If TRUE and reading the results fail, the
simulations will still be rerun.}

\item{seed}{Seed to pass to Nonmem. Default is to draw one like
`sample(1:1e8,size=1)` for each simulation. In case
type.sim=known, seed is not used and will be set to 1.}

\item{args.psn.execute}{A charachter string that will be passed as
arguments PSN's `execute`.}

\item{nmquiet}{Silent messages from Nonmem.}

\item{text.table}{A character string including the variables to
export from Nonmem. The default is to export the same tables
as listed in the input control stream. But if many variables
are exported, and much fewer are used, it can speed up NMsim
significantly to only export what is needed (sometimes this is
as little as "PRED IPRED"). Nonmem writes data slowly so
reducing output data from say 100 columns to a handful makes a
big difference.}

\item{type.mod}{The control stream "type". Default is "est"
meaning that an $ESTIMATION block will be replaced by a
"$SIMULATION" block, and parameter estimates should be taken
from the estimation results. If the control stream has already
been turned into a simulation control stream, and only $INPUT,
$DATA, and $TABLE sections should be edited. This implies that
in case type.mod="sim", `subproblems` is ignored. `type.mod`
may be automated in the future.}

\item{type.sim}{One of "default" (new simulation), "typical"
(typical subject, ETAs = 0), or "known" (ID's observed in
model estimation).}

\item{execute}{Execute the simulation or only prepare it?
`execute=FALSE` can be useful if you want to do additional
tweaks or simulate using other parameter estimates.}

\item{sge}{Submit to cluster? Default is not to, but this is very
useful if creating a large number of simulations,
e.g. simulate with all parameter estimates from a bootstrap
result.}

\item{transform}{A list defining transformations to be applied
after the Nonmem simulations and before plotting. For each
list element, its name refers to the name of the column to
transform, the contents must be the function to apply.}

\item{type.input}{Deprecated. Use type.mod instead.}

\item{method.execute}{Specify how to call Nonmem. Options are
"psn" (PSN's execute), "directory" (an internal method similar
to PSN's execute), and "direct" (just run Nonmem directly and
dump all the temporary files). "directory" has advantages over
"psn" that makes it the only supported method when
type.sim="known". "psn" has the simple advantage that the path
to nonmem does not have to be specified if "execute" is in the
system search path. So as long as you know where your Nonmem
executable is, "directory" is recommended. The default is
"directory" if path.nonmem is specified, and "psn" if not.}

\item{method.update.inits}{The initial estimates must be updated
from the estimated model before running the simulation. NMsim
supports two ways of doing this: "psn" which uses PSN's
"update_inits", and "nmsim" which uses a simple internal
method. The advantage of "psn" is it keeps comments in the
control stream and is a method known to many. The advantages
of "nmsim" are it does not require PSN, and that it is very
robust. "nmsim" fixes the whole OMEGA and SIGMA matrices as
single blocks making the $OMEGA and $SIGMA sections of the
control streams less easy to read. On the other hand, this
method is robust because it avoids any interpretation of BLOCK
structure or other code in the control streams.}

\item{create.dir}{If the directory specified in dir.sim does not
exists, should it be created? Default is TRUE.}

\item{dir.psn}{The directory in which to find PSN's executables
('execute' and 'update_inits'). The default is to rely on the
system's search path. So if you can run 'execute' and
'update_inits' by just typing that in a terminal, you don't
need to specify this unless you want to explicitly use a
specific installation of PSN on your system.}

\item{path.nonmem}{The path to the Nonmem executable to use. The
could be something like "/usr/local/NONMEM/run/nmfe75" (which
is a made up example). No default is available. You should be
able to figure this out through how you normally execute
Nonmem, or ask a colleague.}

\item{as.fun}{The default is to return data as a data.frame. Pass
a function (say tibble::as_tibble) in as.fun to convert to
something else. If data.tables are wanted, use
as.fun="data.table". The default can be configured using
NMdataConf.}

\item{suffix.sim}{Deprecated. Use name.sim instead.}
}
\description{
Supply a data set and an input control stream, and NMsim will
create neccesary files, run the simulation and read the results.
}
