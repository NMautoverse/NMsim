[{"path":"https://philipdelff.github.io/NMsim/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"NMsim basics","text":"vignettes aims enabling Use NMsim simulate Nonmem models given input data set Distinguish perform common types simulations: new subjects (default), typical subjects, known subjects, simulation parameter uncertainty Configure NMsim use PSN methods provided NMsim update Nonmem control stream initial values run Nonmem Understand pros cons using PSN vs. methods provided NMsim.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"estimation-then-simulation","dir":"Articles","previous_headings":"","what":"Estimation, then simulation","title":"NMsim basics","text":"situation like : collected PK PD data drug candidate. PK model estimated using Nonmem. file model input output control streams (extensions .mod .lst respetively), parameter estimates (.ext) estimated random effects (.phi) available. want predict exposure dosing regimens particularly interested . regimens studied clinical trials far, decided use population PK simulations purpose. pop PK model estimated using ADVAN subroutine extravascular dosing compartment 1 andthe central compartment compartment 2. put together simulation data set. used NMcreateDoses addEVID2 functions NMsim , topic vignette. simulate two different doses (100 mg 400 mg) single dose, dose levels QD double loading dose.","code":"NMexpandDoses(dat.sim1) %>%     group_by(ID,regimen,DOSE,EVID,AMT) %>%     summarize(N=length(EVID)) %>%     spread(EVID,N) #> `summarise()` has grouped output by 'ID', 'regimen', 'DOSE', 'EVID'. You can #> override using the `.groups` argument. #> # A tibble: 3 × 6 #> # Groups:   ID, regimen, DOSE [1] #>      ID regimen  DOSE    AMT   `1`   `2` #>   <int> <chr>   <dbl>  <dbl> <int> <int> #> 1     1 QD        400 400000     6    NA #> 2     1 QD        400 800000     1    NA #> 3     1 QD        400     NA    NA   169  print(as.data.table(dat.sim1),topn=5) #>      ROW ID TIME EVID CMT   AMT II ADDL DV MDV DOSE   dose regimen #>   1:   1  1    0    1   1 8e+05  0    0 NA   1  400 400 mg      QD #>   2:   2  1    0    2   2    NA NA   NA NA   1  400 400 mg      QD #>   3:   3  1    1    2   2    NA NA   NA NA   1  400 400 mg      QD #>   4:   4  1    2    2   2    NA NA   NA NA   1  400 400 mg      QD #>   5:   5  1    3    2   2    NA NA   NA NA   1  400 400 mg      QD #>  ---                                                               #> 167: 167  1  164    2   2    NA NA   NA NA   1  400 400 mg      QD #> 168: 168  1  165    2   2    NA NA   NA NA   1  400 400 mg      QD #> 169: 169  1  166    2   2    NA NA   NA NA   1  400 400 mg      QD #> 170: 170  1  167    2   2    NA NA   NA NA   1  400 400 mg      QD #> 171: 171  1  168    2   2    NA NA   NA NA   1  400 400 mg      QD"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"simulation-of-new-subjects","dir":"Articles","previous_headings":"","what":"Simulation of new subjects","title":"NMsim basics","text":"first time using NMsim, just want try simplest thing can think . plot population individual predictions simulations (case) typical subject one simulated subject. Residual variability simulated case. later paper. continue model, want compare simulation based model another model considering. NMsim can collect data one object: case multiple models provided, NMsim simply loops . collect results, can use model column separate two simulations: simplicity, shall show rest examples just one model. run multiple models way shown .","code":"## file.mod <- \"../nonmem/xgxr014.mod\" file.mod <- file.project(\"nonmem/xgxr017.mod\") file.mod <- \"~/xgxg_data/nonmem/xgxr018.mod\" file.mod <- \"~/xgxg_data/nonmem/xgxr021.mod\" simres <- NMsim(path.mod=file.mod,                 data=dat.sim1                 ## ,method.update.inits=\"nmsim\"                ,dir.sims=\"~/NMsim_test\"                ,seed=12345                 ) as.data.table(simres) |>     melt(measure.vars=cc(PRED,IPRED))|>     ggplot(aes(TIME,value,colour=variable))+     geom_line()+     facet_wrap(~regimen+dose)  datl <- as.data.table(simres) |>     melt(measure.vars=cc(PRED,IPRED,Y)) ## datl[,type:=\"Prediction\"] ## datl[variable==\"Y\",type:=\"Simulation\"]      ggplot(datl,aes(TIME,value,colour=variable))+     geom_line(data=function(x)x[variable!=\"Y\"])+     geom_point(data=function(x)x[variable==\"Y\"])+     facet_wrap(~regimen+dose) ## file.mod <- \"../nonmem/xgxr014.mod\" file.mod <- file.project(c(\"nonmem/xgxr014.mod\",\"nonmem/xgxr114.mod\")) simres <- NMsim(path.mod=file.mod,                 data=dat.sim1                 ) ggplot(simres,aes(TIME,PRED,colour=model))+geom_line()+     facet_wrap(c(\"regimen\",\"dose\"),scales=\"free\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"more-subjects","dir":"Articles","previous_headings":"Simulation of new subjects","what":"More subjects","title":"NMsim basics","text":"create prediction interval based selected model, need simulate multiple new subjects. two ways easily obtain . One repeat (rbind) simulation input dataset, one repetetion per new subject, update ID column get distinct subjects. follwing shows one generate 1000 subjects using data.table. (use data.table lot, can provide good way tidyverse packages, happy include instead). now simulate 1000 subjects plugging data object: way making use Nonmem’s SUBPROBLEMS simulation feature makes Nonmem rerun simulation specified number times. Notice , use dat.sim1 data without 1000 replications. make use NMREP column generated NMdata::NMscanData redefine ID column: two approaches computationally equally fast, significant difference probably Nonmem reading smaller larger simulation input data file. merely question preference modeler one use. general case simulated patients need different dosing sample schedules, manual repetition data needed. now plot prediction interval - case based results simulation using SUBPROBLEMS; makes difference derive prediction interval.","code":"dat.sim.1000 <- NMdata::egdt(                             as.data.table(dat.sim1)[,!(\"ID\")]                            ,                             data.table(ID=1:1000)                         ) dat.sim.1000[,ID:=.GRP,by=.(ID,regimen,dose)]  setorder(dat.sim.1000,regimen,dose,ID,TIME,EVID) file.mod <- file.project(\"nonmem/xgxr014.mod\") simres <- NMsim(path.mod=file.mod,                 data=dat.sim.1000                 ) ## file.mod <- \"../nonmem/xgxr014.mod\" file.mod <- file.project(\"nonmem/xgxr014.mod\") simres <- NMsim(path.mod=file.mod,                 data=dat.sim1,                 subproblems=1000                 ) simres <- as.data.table(simres)[,ID:=.GRP,by=.(NMREP,ID,regimen,dose)] simres.pi <- simres[,setNames(as.list(quantile(IPRED,probs=c(.05,.5,.95))),cc(ll,median,ul)),                     by=.(regimen,TIME,dose)] simres.pi$type <- \"pi\" simres.pi$pi.cover <- \"90%\"  p.pi.typ <- ggplot(simres.pi,aes(TIME,fill=dose))+     geom_ribbon(aes(ymin=ll,ymax=ul,alpha=pi.cover))+     geom_line(aes(y=median,colour=dose))+     facet_wrap(~regimen,scales=\"free_x\")+     scale_alpha_manual(values=c(\"90%\"=.5))+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\")  p.pi.typ"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"simulation-of-a-typical-subject","dir":"Articles","previous_headings":"","what":"Simulation of a typical subject","title":"NMsim basics","text":"typical subject understood subject without random effects, .e. ETA’s equal zero. important realize “typical” covariates user still need control model, simulation input data, combination . Getting NMsim run ETA’s equaling zero easy: first simulation used PRED default simulation method get typical subject simulation. work many cases, depends model. way run simulation ETA’s set 0 using method.sim=NMsim_typical.","code":"simres.typ <- NMsim(path.mod=file.mod,                     data=dat.sim1,                     name.sim=\"typSubj\",                     method.sim=NMsim_typical) p.typ <- ggplot(simres.typ,aes(TIME,IPRED))+geom_line()+     geom_line(aes(y=PRED),colour=2) p.typ"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"simulation-of-known-subjects","dir":"Articles","previous_headings":"","what":"Simulation of known subjects","title":"NMsim basics","text":"sometimes want simulate already observed subjects. means want reuse estimated random effects (ETA’s) given subject ID’s. NMsim method . restriction subjects (values ID) simulation input data must used estimation input data.","code":"base.sim.known <- dat.sim.md[dat.sim.md$DOSE==400,]  res.mod <- NMscanData(file.mod) ids <- data.frame(ID=unique(res.mod$ID))   dat.sim1.known <- merge(ids,                         base.sim.known[,setdiff(colnames(base.sim.known),c(\"ID\"))]                         ) setorder(dat.sim1.known,ID,TIME,EVID)  res.known <- NMsim(file.mod,                    data=dat.sim1.known,                    suffix.sim=\"known1\",                    text.table=\"PRED IPRED CL V KA\"                   ,method.sim=NMsim_known                    ## ,method.update.inits=\"nmsim\"                    ## ,path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\"                    )"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"impute-simulation-times-for-building-a-pkpd-dataset","dir":"Articles","previous_headings":"Simulation of known subjects","what":"Impute simulation times for building a PK/PD dataset","title":"NMsim basics","text":"also connected PK data. want plot PD data angainst PK. However, PD sampled differnetly PK, want evaluate individual predictions PK model individual PD samplng times. Currently, PD data example data used build vignette. PK model without time-varying covariates, steps generate data simulation : Take dose records PK model estimation input data (pkdos). Just keep necessary columns like ID, TIME, EVID, CMT, AMT, ADDL, II, necessary covariates Take PD data observation records (pdsamples). Just keep ID, TIME, set EVID=2. Add unique row identifier pdsamples (integer row counter, like ROW=1:nrow(pdsamples)) Stack (rbind data.tables bind_rows tidyverse) pkdos pdsamples one data set (pdsim) pdsim, set DV=NA Sort pdsim least ID, TIME EVID. depending trial design case time-varying covariates, can keep data records PK data (without DV), change observation records simulation records (EVID=2 instead EVID=0). run NMsim like : Now rename res.pksim$IPRED something meaningfull like res.pksim$PKIPRED, can merge res.pksim onto PD data unique row identifier.","code":"## Take dose records from PK model estimation input data pkres <- NMscanData(file.mod,as.fun=\"data.table\") pkdos <- pkres[EVID==1,.(ID, TIME, EVID, CMT, AMT)] ## Take PD data observation records (`pdsamples`) pd[,ROWPD:=.I] pdsamples <- pd[EVID==0,.(ROWPD,ID,TIME,EVID=2)] ## Stack `pkdos` and `pdsamples` to one data set (`pdsim`) pdsim <- rbind(pkdos,pdsamples,fill=TRUE) pdsim[,DV:=NA] ## pdsim[,all(ID%in%pkres$ID)] ## pdsim[,.N,by=ID%in%pkres$ID] pdsim <- pdsim[ID%in%pkres$ID] setorder(pdsim,ID,TIME,EVID) res.pksim <- NMsim(file.mod,                    data=pdsim,                    suffix.sim=\"pkpd\",                   ,method.sim=NMsim_known                   ,path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\"                   ,text.table=\"IPRED PRED\"                    ) setnames(res.pksim,\"IPRED\",\"PKIPRED\") pd2 <- mergeCheck(pd,res.pksim[,.(ROWPD,PKIPRED)],by=\"ROWPD\",all.x=TRUE) ggplot(pd2[PKIPRED>0],aes(PKIPRED,LIDV))+     geom_point()+     lims(x=c(.001,.5))+     labs(x=\"Individual PK prediction\",y=\"Observed PD value\") ## + ## scale_x_log10(limits=c(.001,.5))"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"simulation-of-parameter-uncertainty","dir":"Articles","previous_headings":"","what":"Simulation of parameter uncertainty","title":"NMsim basics","text":"already saw NMsim can easily used generate new subjects (say prediction intervals) using -subject -occasion variability described model. may also want simulate uncertainty parameter estimates (say confidence intervals). NMsim supports two different approaches . Simulation based estimated variance-covariance matrix parameters estimated successful $COVARIANCE step Nonmem. Simulation based bootstrap model. NMsim provide functions run bootstrap, can use results sampled models, like generated PSN’s bootstrap function. beyond scope vignette describe pros cons two approaches. following examples serve exlain preequisites using NMsim , obviously get NMsim job.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"simulation-of-parameter-uncertainty-based-on-a-covariance-step","dir":"Articles","previous_headings":"Simulation of parameter uncertainty","what":"Simulation of parameter uncertainty based on a covariance step","title":"NMsim basics","text":"succesful covariance step Nonmem, NMsim can sample models estimated variance-covariance matrix. , NMsim derive confidence intervals based estimated variance-covariance matrix. samples models , can derive desired confidence intervals, whatever need. , shall try get far details , remember . assuming estimated vairance-covariance matrix reliable estimate parameter precision, implying Gaussian distribution parameter uncertainties. reason important understand depending model, can lead samples parameter values beyond allowed range. can lead sampled models fail meaningful. point successful covariance step may sufficient criterion picking approach simulating uncertainty; appropriate parametrization another one. Anyway, getting NMsim work simple : used sge=TRUE means sending 500 generated jobs queuing system. case, NMsim track execution jobs hence collect results done. check status jobs manually, done, can read results using NMdata::NMscanMultiple: NMdata::NMscanMultiple wrapper NMdata::NMscanData, just like NMdata::NMscanData keeps column default called model holds model name, derived control stream file name. example, can derive estimated confidence interval population prediction time summarizing across simulation models (samples):","code":"## file.mod.cov <- file.project(\"nonmem/xgxr114.mod\") NMdataConf(path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\")  file.mod.cov <- \"~/xgxg_data/nonmem/xgxr017.mod\" NMsim(     path.mod=file.mod.cov,     data=dat.sim1    ,dir.sims=\"simulations\"    ,method.sim=NMsim_VarCov ## Var-Cov parameter sampling    ,name.sim=\"VarCov\"       ## a recognizable directory name    ,nsims=500               ## sampling 500 models     ## ,method.execute=\"psn\"    ## use PSN's execute to allow for parallel execution    ,method.execute=\"directory\"    ##     ,sge=TRUE                ## run simulations in parallel please ) simres.VarCov <- NMscanMultiple(## dir=\"simulations/xgxr114_VarCov\"     dir=file.path(\"simulations\",paste0(basename(fnExtension(file.mod.cov,\"\")),\"_VarCov\"))    ,file.pattern=\".+\\\\.lst$\"    ,merge.by.row=FALSE,quiet=T    ,as.fun=\"data.table\") allresl <- melt(simres.VarCov[EVID==2],measure.vars=cc(PRED,IPRED),variable.name=\"pred.type\",value.name=\"pred\")  sum.res.model <- allresl[,                          .(predm=quantile(pred,probs=c(.5)))                         ,by=.(model,regimen,dose,DOSE,TIME,pred.type)]   sum.res <- sum.res.model[,                          setNames(as.list(quantile(predm,probs=c(.025,.5,.975))),cc(predml,predmm,predmu))                          ,by=.(regimen,dose,DOSE,TIME,pred.type)]     ggplot(sum.res,aes(x=TIME,fill=dose))+     geom_ribbon(aes(ymin=predml,ymax=predmu),alpha=.5)+     geom_line(aes(y=predmm,colour=dose))+     ## facet_grid(regimen~pred.type,scales=\"free_x\")     facet_wrap(cc(regimen,pred.type),scales=\"free_x\")  ## 400 mg only p.cipi.VarCov <- ggplot(sum.res[DOSE==400],aes(x=TIME,fill=pred.type))+     geom_ribbon(aes(ymin=predml,ymax=predmu),alpha=.5)+     geom_line(aes(y=predmm,colour=pred.type))+     facet_wrap(\"regimen\",scales=\"free_x\")+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"simulation-from-a-bootstrap","dir":"Articles","previous_headings":"Simulation of parameter uncertainty","what":"Simulation from a bootstrap","title":"NMsim basics","text":"approach simulation parameter uncertainty currently provided NMsim simulation bootstrap. , NMsim run bootstrap, simply runs simulation using sampled models bootstrap. fact means don’t even need dedicated method achieve , simply run simulation multiple Nonmem models described begging vignette. used PSN’s bootstrap. can run simulation models way: Reading post-processing results similar steps used covariance step.","code":"## generate a vector with paths to all the input control streams  ## mods.bootstrap <- list.files(path=\"../nonmem/bs1_014_N1000/m1\",pattern=\".+\\\\.mod$\",full.names = T) mods.bootstrap <- list.files(path=\"~/xgxg_data/nonmem/bootstrap_dir2/m1/\",pattern=\".+\\\\.mod$\",full.names = T)  NMsim(     path.mod=mods.bootstrap,     data=dat.sim1    ,method.sim=NMsim_default ## a single simulation with each sampled model    ,dir.sims=\"simulations/bootstrap\"     ## ,name.sim=\"bootstrap\"       ## a recognizable directory name    ,method.execute=\"psn\"    ## use PSN's execute to allow for parallel execution    ,text.table=\"PRED IPRED\"    ,sge=TRUE                ## run simulations in parallel please ) ## ~/xgxg_data/nonmem/bootstrap_dir2/m1/NMsim/bs_pr1_100_bootstrap/NMsim_bs_pr1_100_bootstrap.mod files.lst <- list.files(\"simulations/bootstrap\",recursive=TRUE,pattern=\".lst$\",full.names=TRUE)  simres.bootstrap <- NMscanMultiple(files=files.lst                                    ## dir=\"                                    ## ,file.pattern=\".+\\\\.lst$\"                                   ,merge.by.row=FALSE,quiet=T                                   ,as.fun=\"data.table\")  allresl <- melt(simres.bootstrap[EVID==2],measure.vars=cc(PRED,IPRED),variable.name=\"pred.type\",value.name=\"pred\")  sum.res.model <- allresl[,                          .(predm=quantile(pred,probs=c(.5)))                         ,by=.(model,regimen,dose,DOSE,TIME,pred.type)]   sum.res.bootstrap <- sum.res.model[,                                    setNames(as.list(quantile(predm,probs=c(.025,.5,.975))),cc(predml,predmm,predmu))                                    ,by=.(regimen,dose,DOSE,TIME,pred.type)] p.cipi.bootstrap <- ggplot(sum.res.bootstrap[DOSE==400],aes(x=TIME,fill=pred.type))+     geom_ribbon(aes(ymin=predml,ymax=predmu),alpha=.5)+     geom_line(aes(y=predmm,colour=pred.type))+     facet_wrap(\"regimen\",scales=\"free_x\")+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\")  p.cipi.bootstrap p.cipi.VarCov+     lims(y=c(0,12500))+     labs(subtitle=\"Covariance step\")+     p.cipi.bootstrap+     lims(y=c(0,12500))+     labs(subtitle=\"Bootstrap\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"add-residual-variability","dir":"Articles","previous_headings":"","what":"Add residual variability","title":"NMsim basics","text":"NMsim currently provide way add simulation residual variability Nonmem. however provide method simulate residual variability R, based Nonmem parameter estimates. function called addResVar() supports additive, proportional, combined (additive proportional) error models. can also add residual error log scale (exponential error model). NMresVar supports estimation using $SIGMA $THETA (Nonmem). user specify two methods used Nonmem model using par.type argument. thing must specified parameter numbers standard deviations variances. model simulated vignette combined error model estimated using $SIGMA matrix: now specify addResVar find variance proportional component $SIGMA[1,1] one additive component $SIGMA[2,2]. case SIGMA used, -diagonal (covariance) elements $SIGMA matrix also used simulation.","code":"Y=F+F*ERR(1)+ERR(2) simres.with.resvar <- addResVar(simres,path.ext=fnExtension(file.mod,\"ext\"),par.type=\"SIGMA\",prop=1,add=2)"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim_basics.html","id":"configuration-of-how-to-execute-nonmem","dir":"Articles","previous_headings":"","what":"Configuration of how to execute Nonmem","title":"NMsim basics","text":"NMsim supports two ways","code":""},{"path":[]},{"path":"https://philipdelff.github.io/NMsim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philip Delff. Author, maintainer.","code":""},{"path":"https://philipdelff.github.io/NMsim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Delff P (2023). NMsim: Start Nonmem jobs run Nonmem simulations R. R package version 0.0.1.922, https://philipdelff.github.io/NMsim/.","code":"@Manual{,   title = {NMsim: Start Nonmem jobs and run Nonmem simulations from R},   author = {Philip Delff},   year = {2023},   note = {R package version 0.0.1.922},   url = {https://philipdelff.github.io/NMsim/}, }"},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"nmsim","dir":"","previous_headings":"","what":"Start Nonmem jobs and run Nonmem simulations from R","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"NMsim R package can modify start Nonmem jobs within R. notably, can simulate Nonmem models (using NMsim function) based just simulation data set path estimation control stream. also retrive combine output tables input data Nonmem finished return results R.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"Easiest way install NMsim using remotes package install R: NMsim makes extensive use functionality provided NMdata package. recent features NMsim work, make sure least keep NMdata updated latest CRAN MPN release.","code":"library(remotes) install_github(\"philipdelff/NMsim\")"},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"simulate-a-nonmem-model-from-r","dir":"","previous_headings":"","what":"Simulate a Nonmem model from R","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"simplest use, simulation model stored “path//file.mod” using simulation input data set stored variable data.sim way: NMsim following: Save simulation input data Nonmem Create simulation input control stream based file.mod ($INPUT $DATA matching simulation data set, $SIMULATE instead $ESTIMATION) Update fix initial values based estimate (file.ext) Run Nonmem generated simulation control stream Collect output data tables, combine , merge simulation input data Return collected data","code":"simres <- NMsim(path.mod=/path/to/file.mod,                 data=data.sim)"},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"how-nmsim-works","dir":"","previous_headings":"","what":"How NMsim works","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"One strength NMsim simulate, translate otherwise interpret model. Instead, automates simulation workflow Nonmem wraps one R function. eliminates need re-implementation model. hand, also means NMsim can’t work without Nonmem, provide anything beyond model. NMsim can use Nonmem directly via PSN. NMsim run Nonmem can’t executed, NMsim can still prepare simulation control stream datafile. NMsim small R package. makes extensive use functionality handle Nonmem data control streams provided R package NMdata.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"supported-types-of-simulations","dir":"","previous_headings":"","what":"Supported types of simulations","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"NMsim flexible way define simulation methods. following methods currently provided: Simulation new subjects (default explicitly method.sim=NMsim_default) Simulation typical subject (ETAs equal 0, method.sim=NMsim_typical) Simulation subjects already estimated Nonmem model (method.sim=NMsim_known) Simulation parameter uncertain based Nonmem covariance step (method.sim=NMsim_VarCov) Simulation “” case already prepared simulation control stream just want automate use combination simulation data sets (method.sim=NMsim_asis) addition, NMsim can simulate multiple models time. E.g., bootstrap run model available, NMsim can run simulation bootstrap models collect results one dataset. provides robust easy way simulate Nonmem model uncertainty. can also write methods, Nonmem-based simulation (job) want automate using NMsim. Many features available. Prominent ones : - Can use submit jobs clusters (running simulation say 1,000 model estimates bootstrap actually hard). - Simulation replicates using Nonmem SUBPROBLEMS feature avaible subproblems argument - Simulations models transformed observations can automatically transformed back using transform argument. Since NMsim change model code (like $PRED, $PK, $ERROR), add residual variability simulation simulated model code already. provide way add residual variability R simulation run addResVar(). want discuss add generally possible, please reach github.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"supported-model-types","dir":"","previous_headings":"","what":"Supported model types","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"methods currently provided NMsim work (many ) Pop PK models continuous-scale PD models. Methods currently provided time--event models. Also, depending coding models, censored data models may work box, model may single variable (Nonmem) simulates wanted information data rows, interpretation may depend values. input data set must contain whatever variables needed Nonmem model. common issue Nonmem model uses covariate simulation input data set. NMdata’s NMcheckData good help identifying input data issues running Nonmem - Nonmem acts unexpectedly.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"nmsim-and-speed","dir":"","previous_headings":"","what":"NMsim and speed","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"Nonmem may fastest simulator . actually often, reason Nonmem slow providing simulation result takes long time writing $TABLE files (yes, can account 90% time Nonmem spends). NMsim provides simple way get around . argument text.table can used define columns needed simulation output (may little PRED, IPRED, couple - remember input data merged back automatically). result, NMsim may still slower re-implementation different framework. ’s extremely easy .","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"Currently, NMsim can run Nonmem Unix/Linux systems. wouldn’t big deal add support Windows, reach need . possible run R Windows run Nonmem Unix/Linux system SSH needed. NMsim need PSN can use . However, features available PSN, features specify path Nonmem executable (say path.nonmem=/path//nmfe75 Nonmem executable want use). Specifically simulation types currently available, simulation known subjects possible using PSN (works Nonmem executable provided). hand, submitting jobs clusters currently supported via PSN. PSN used, NMsim uses PSN’s execute run models. addition, NMsim can use PSN’s update_inits update initial values control streams. NMsim also include simple function PSN available.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"is-nmsim-trustworthy","dir":"","previous_headings":"","what":"Is NMsim trustworthy?","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"Importantly, NMsim modify, translate simulate model . modify control stream sections $INPUT, $DATA, $ESTIMATION, $SIMULATION, $THETA, $OMEGA, $SIGMA, $TABLE needed. fact NMsim allows skipping re-implementation just simulates Nonmem model , eliminates risk discrepancies estimated model simulated model. produced control stream saved together simulation data set open manual inspection can obviously run Nonmem independently NMsim.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"easily-create-simulation-datasets","dir":"","previous_headings":"","what":"Easily create simulation datasets","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"NMsim includes functions (NMcreateDoses addEVID2) easily create simulation data sets. one certainly need use functions use NMsim, add package providing framework enables complete simulation workflow 5-15 simple lines R code.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"run-nonmem-from-r","dir":"","previous_headings":"","what":"Run Nonmem from R","title":"Start Nonmem jobs and run Nonmem simulations from R","text":"several packages can , NMsim may best choice feature looking . However, running Nonmem using NMexec() function provided NMsim one important advantage saves input data together Nonmem control streams. ensures output data can merged input data went model, even input data file modified lost. Saves input data Nonmem model Provides simple R command submission Nonmem jobs Optionally handles cluster configuration Saves xml file default NMexec submit model runs cluster default. can switched running Nonmem locally. Please notice jobs submitted cluster specific way using PSN. setup different, now supported. Please use NMexec(sge=FALSE) case (may desirable). Notice simulations done cluster default may still able use NMsim.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily generate dosing records — NMcreateDoses","title":"Easily generate dosing records — NMcreateDoses","text":"Combinations different columns can generated. Columns extended repeating last value column needed order match length columns.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily generate dosing records — NMcreateDoses","text":"","code":"NMcreateDoses(   TIME,   AMT = NULL,   RATE = NULL,   SS = NULL,   CMT = 1,   EVID = 1,   addl = NULL,   as.fun )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily generate dosing records — NMcreateDoses","text":"TIME time dosing events AMT vector dataa.frame amounts amount RATE Optional infusion rate SS Optional steady-state flag CMT Compartment number. Default dose CMT=1. EVID event ID use doses. Default use EVID=1, EVID might also wanted. addl Optinal. list ADDL II applied last dose .fun default return data data.frame. Pass function (say tibble::as_tibble) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily generate dosing records — NMcreateDoses","text":"","code":"library(data.table) ## arguments are expanded - makes loading easy NMcreateDoses(TIME=c(0,12,24,36),AMT=c(2,1)) #>   ID TIME EVID CMT AMT MDV #> 1  1    0    1   1   2   1 #> 2  1   12    1   1   1   1 #> 3  1   24    1   1   1   1 #> 4  1   36    1   1   1   1 ## Different doses by covariate NMcreateDoses(TIME=c(0,12,24),AMT=data.table(AMT=c(2,1,4,2),DOSE=c(1,2))) #>   ID TIME EVID CMT AMT MDV DOSE #> 1  1    0    1   1   2   1    1 #> 2  1   12    1   1   4   1    1 #> 3  1   24    1   1   4   1    1 #> 4  2    0    1   1   1   1    2 #> 5  2   12    1   1   2   1    2 #> 6  2   24    1   1   2   1    2 ## Make Nonmem repeat the last dose. This is a total of 20 dosing events. NMcreateDoses(TIME=c(0,12),AMT=c(2,1),addl=list(ADDL=c(NA,9*2),II=c(NA,12))) #>   ID TIME EVID CMT AMT II ADDL MDV #> 1  1    0    1   1   2 NA   NA   1 #> 2  1   12    1   1   1 12   18   1 dt.amt <- data.table(DOSE=c(100,400)) dt.amt[,AMT:=DOSE*1000] #>    DOSE   AMT #> 1:  100 1e+05 #> 2:  400 4e+05 dt.amt #>    DOSE   AMT #> 1:  100 1e+05 #> 2:  400 4e+05 doses.sd <- NMcreateDoses(TIME=0,AMT=dt.amt) doses.sd$dose <- paste(doses.sd$DOSE,\"mg\") doses.sd$regimen <- \"SD\" doses.sd #>   ID TIME EVID CMT   AMT MDV DOSE   dose regimen #> 1  1    0    1   1 1e+05   1  100 100 mg      SD #> 2  2    0    1   1 4e+05   1  400 400 mg      SD  ### multiple dose regimens with loading are easily created with NMcreateDoses too ## Specifying the time points explicitly dt.amt <- data.table(AMT=c(200,100,800,400)*1000,DOSE=c(100,100,400,400)) doses.md.1 <- NMcreateDoses(TIME=seq(0,by=24,length.out=7),AMT=dt.amt) doses.md.1$dose <- paste(doses.md.1$DOSE,\"mg\") doses.md.1$regimen <- \"QD\" doses.md.1 #>    ID TIME EVID CMT   AMT MDV DOSE   dose regimen #> 1   1    0    1   1 2e+05   1  100 100 mg      QD #> 2   1   24    1   1 1e+05   1  100 100 mg      QD #> 3   1   48    1   1 1e+05   1  100 100 mg      QD #> 4   1   72    1   1 1e+05   1  100 100 mg      QD #> 5   1   96    1   1 1e+05   1  100 100 mg      QD #> 6   1  120    1   1 1e+05   1  100 100 mg      QD #> 7   1  144    1   1 1e+05   1  100 100 mg      QD #> 8   2    0    1   1 8e+05   1  400 400 mg      QD #> 9   2   24    1   1 4e+05   1  400 400 mg      QD #> 10  2   48    1   1 4e+05   1  400 400 mg      QD #> 11  2   72    1   1 4e+05   1  400 400 mg      QD #> 12  2   96    1   1 4e+05   1  400 400 mg      QD #> 13  2  120    1   1 4e+05   1  400 400 mg      QD #> 14  2  144    1   1 4e+05   1  400 400 mg      QD ## or using ADDL+II dt.amt <- data.table(AMT=c(200,100,800,400)*1000,DOSE=c(100,100,400,400)) doses.md.2 <- NMcreateDoses(TIME=c(0,24),AMT=dt.amt,addl=data.table(ADDL=c(0,5),II=c(0,24))) doses.md.2$dose <- paste(doses.md.2$DOSE,\"mg\") doses.md.2$regimen <- \"QD\" doses.md.2 #>   ID TIME EVID CMT   AMT II ADDL MDV DOSE   dose regimen #> 1  1    0    1   1 2e+05  0    0   1  100 100 mg      QD #> 2  1   24    1   1 1e+05 24    5   1  100 100 mg      QD #> 3  2    0    1   1 8e+05  0    0   1  400 400 mg      QD #> 4  2   24    1   1 4e+05 24    5   1  400 400 mg      QD"},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":null,"dir":"Reference","previous_headings":"","what":"execute nonmem while also archiving input data — NMexec","title":"execute nonmem while also archiving input data — NMexec","text":"execute nonmem also archiving input data","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"execute nonmem while also archiving input data — NMexec","text":"","code":"NMexec(   files,   file.pattern,   dir,   sge = TRUE,   input.archive,   nc = 64,   dir.data = NULL,   wait = FALSE,   args.psn.execute,   update.only = FALSE,   nmquiet = FALSE,   method.execute = \"psn\",   dir.psn,   path.nonmem,   files.needed )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"execute nonmem while also archiving input data — NMexec","text":"files File paths models (control streams) run nonmem . See file.pattern . file.pattern Alternatively files, can supply regular expression passed list.files pattern argument. used, use dir argument well. Also see data.file process models use specific data file. dir file.pattern used, dir directory search control streams . sge Use sge queing system. Default TRUE. Disable quick models wait. input.archive function model file path generate path archive input data RDS. Set NULL archive data. nc Number cores use sending cluster. Default 64. dir.data directory data file stored. normally needed data found using path control stream. argument may removed future since needed. wait Wait process finish making R console available ? useful calling NMexec function needs wait output Nonmem run available processing. args.psn.execute character string arguments passed execute. Default \"-model_dir_name -nm_output=xml,ext,cov,cor,coi,phi\". update.run model(s) control stream data updated since last run? nmquiet Suppress terminal output `Nonmem`. likely work linux/unix systems. method.execute run nonmem. Must one 'psn', 'direct', 'directory'. dir.psn directory find PSN executables. needed searchable system path, user want explicit find (.e. want use specific installed version PSN). path.nonmem path nonmem executable. used method.execute=\"direct\" (default). argument supplied, NMexec try run nmfe75, .e. available path underlying shell. files.needed case method.execute=\"directory\", argument specifies files copied temporary directory Nonmem run. Input control stream simulation input data need specified.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"execute nonmem while also archiving input data — NMexec","text":"Use read archived input data retrieving     nonmem results     NMdataConf(file.data=function(x)fnExtension(fnAppend(x,\"input\"),\".rds\"))","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"execute nonmem while also archiving input data — NMexec","text":"","code":"if (FALSE) { file.mod <- \"run001.mod\" ## run locally - not on cluster NMexec(file.mod,sge=FALSE) ## run on cluster with 16 cores. 64 cores is default NMexec(file.mod,nc=16) ## submit multiple models to cluster multiple.models <- c(\"run001.mod\",\"run002.mod\") NMexec(multiple.models,nc=16) ## run all models called run001.mod - run099.mod if updated. 64 cores to each. NMexec(file.pattern=\"run0..\\\\.mod\",dir=\"models\",nc=16,update.only=TRUE) }"},{"path":"https://philipdelff.github.io/NMsim/reference/NMexecDirectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute Nonmem inside a dedicated directory — NMexecDirectory","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"Execute Nonmem inside dedicated directory","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexecDirectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"","code":"NMexecDirectory(file.mod, path.nonmem, files.needed, dir.data = \"..\")"},{"path":"https://philipdelff.github.io/NMsim/reference/NMexecDirectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"dir.data NULL, data copied temporary directory, Nonmem read . NULL, dir.data must relative path Nonmem run input data file stored. \"..\" run directory created directory data stored.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexecDirectory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"bash shell script execution Nonmem","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in data file — NMreadCov","title":"Read in data file — NMreadCov","text":"Read data file","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in data file — NMreadCov","text":"","code":"NMreadCov(file, ...)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in data file — NMreadCov","text":"file .cov covariance Nonmem matrix file read ... Passed fread","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in data file — NMreadCov","text":"matrix covariance step NONMEM","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in data file — NMreadCov","text":"function taken nonmem2rx::nmcov.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read in data file — NMreadCov","text":"Philip Delff Matthew L. Fidler","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreplaceInits.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace initial values in Nonmem control stream — NMreplaceInits","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"Replace initial values Nonmem control stream","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreplaceInits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"","code":"NMreplaceInits(inits, fix = FALSE, ...)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMreplaceInits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"inits data.frame new initial estimates, style returned NMreadExt. Column` par.type` can contain elements THETA, OMEGA, SIGMA. fix Fix initial values? Default . ... Passed NMdata::NMwriteSection","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Run simulations from an estimated Nonmem model — NMsim","title":"Run simulations from an estimated Nonmem model — NMsim","text":"Supply data set input control stream, NMsim create neccesary files, run simulation read results.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run simulations from an estimated Nonmem model — NMsim","text":"","code":"NMsim(   path.mod,   data,   dir.sims,   name.sim,   order.columns = TRUE,   script = NULL,   subproblems,   reuse.results = FALSE,   seed,   args.psn.execute,   nmquiet = FALSE,   text.table,   type.mod,   method.sim = NMsim_default,   execute = TRUE,   sge = FALSE,   transform = NULL,   type.input,   method.execute,   method.update.inits,   create.dir = TRUE,   dir.psn,   list.sections,   path.nonmem = NULL,   as.fun,   suffix.sim,   ... )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run simulations from an estimated Nonmem model — NMsim","text":"path.mod Path input control stream run simulation . outpult control stream now assumed stored next input control stream ending .lst instead .modl data simulation data data.frame. dir.sims directory NMsim store generated files. name.sim Give filenames related simulation suffix. short string describing sim recommended like \"ph3_regimens\". order.columns reorder columns calling NMdata::NMorderColumns saving dataset running simulations? Default TRUE. script path script run. stamping dataset results can traced back code. subproblems Number subproblems use SUBPROBLEMS $SIMULATION block Nonmem. default subproblem=0 means use SUBPROBLEMS. reuse.results simulation results found file, used? TRUE reading results fail, simulations still rerun. seed Seed pass Nonmem. Default draw one like `sample(1:1e8,size=1)` simulation. case type.sim=known, seed used set 1. args.psn.execute charachter string passed arguments PSN's `execute`. nmquiet Silent messages Nonmem. text.table character string including variables export Nonmem. default export tables listed input control stream. many variables exported, much fewer used, can speed NMsim significantly export needed (sometimes little \"PRED IPRED\"). Nonmem writes data slowly reducing output data say 100 columns handful makes big difference. type.mod control stream \"type\". Default \"est\" meaning $ESTIMATION block replaced \"$SIMULATION\" block, parameter estimates taken estimation results. control stream already turned simulation control stream, $INPUT, $DATA, $TABLE sections edited. implies case type.mod=\"sim\", `subproblems` ignored. `type.mod` may automated future. method.sim function creates simulation control stream necessary files simulation based estimation control stream, data, etc. Four methods included: NMsim_default, NMsim_typical, NMsim_known, NMsim_VarCov. See examples vignettes use . execute Execute simulation prepare ? `execute=FALSE` can useful want additional tweaks simulate using parameter estimates. sge Submit cluster? Default , useful creating large number simulations, e.g. simulate parameter estimates bootstrap result. transform list defining transformations applied Nonmem simulations plotting. list element, name refers name column transform, contents must function apply. type.input Deprecated. Use type.mod instead. method.execute Specify call Nonmem. Options \"psn\" (PSN's execute), \"directory\" (internal method similar PSN's execute), \"direct\" (just run Nonmem directly dump temporary files). \"directory\" advantages \"psn\" makes supported method type.sim=\"known\". \"psn\" simple advantage path nonmem specified \"execute\" system search path. long know Nonmem executable , \"directory\" recommended. default \"directory\" path.nonmem specified, \"psn\" . method.update.inits initial estimates must updated estimated model running simulation. NMsim supports two ways : \"psn\" uses PSN's \"update_inits\", \"nmsim\" uses simple internal method. advantage \"psn\" keeps comments control stream method known many. advantages \"nmsim\" require PSN, robust. \"nmsim\" fixes whole OMEGA SIGMA matrices single blocks making $OMEGA $SIGMA sections control streams less easy read. hand, method robust avoids interpretation BLOCK structure code control streams. create.dir directory specified dir.sims exists, created? Default TRUE. dir.psn directory find PSN's executables ('execute' 'update_inits'). default rely system's search path. can run 'execute' 'update_inits' just typing terminal, need specify unless want explicitly use specific installation PSN system. path.nonmem path Nonmem executable use. something like \"/usr/local/NONMEM/run/nmfe75\" (made example). default available. able figure normally execute Nonmem, ask colleague. .fun default return data data.frame. Pass function (say tibble::as_tibble) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf. suffix.sim Deprecated. Use name.sim instead. ... Additional arguments passed method.sim.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":null,"dir":"Reference","previous_headings":"","what":"Add simulation records to dosing records — addEVID2","title":"Add simulation records to dosing records — addEVID2","text":"Performs simple job adding simulation events subjects data set. Copies columns varying subject level (.e. non-variying covariates).","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add simulation records to dosing records — addEVID2","text":"","code":"addEVID2(doses, time.sim, CMT, as.fun)"},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add simulation records to dosing records — addEVID2","text":"doses dosing records Nonmem style time.sim numerical vector simulation times CMT compartment insert EVID=2 records. longer one, records repeated specified compartments. data.frame, covariates can specified. .fun default return data data.frame. Pass function (say tibble::as_tibble) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add simulation records to dosing records — addEVID2","text":"resulting data set ordered ID, TIME,     EVID. may reorder specific needs.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add simulation records to dosing records — addEVID2","text":"","code":"library(data.table) (doses1 <- NMcreateDoses(TIME=c(0,12,24,36),AMT=c(2,1))) #>   ID TIME EVID CMT AMT MDV #> 1  1    0    1   1   2   1 #> 2  1   12    1   1   1   1 #> 3  1   24    1   1   1   1 #> 4  1   36    1   1   1   1 addEVID2(doses1,time.sim=seq(0,28,by=4),CMT=2) #>    ID TIME EVID CMT AMT MDV DV #> 1   1    0    1   1   2   1 NA #> 2   1    0    2   2  NA   1 NA #> 3   1    4    2   2  NA   1 NA #> 4   1    8    2   2  NA   1 NA #> 5   1   12    1   1   1   1 NA #> 6   1   12    2   2  NA   1 NA #> 7   1   16    2   2  NA   1 NA #> 8   1   20    2   2  NA   1 NA #> 9   1   24    1   1   1   1 NA #> 10  1   24    2   2  NA   1 NA #> 11  1   28    2   2  NA   1 NA #> 12  1   36    1   1   1   1 NA  ## two named compartments dt.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(0,4,12,24) dt.cmt <- data.table(CMT=c(2,3),analyte=c(\"parent\",\"metabolite\")) res <- addEVID2(dt.doses,time.sim=seq.time,CMT=dt.cmt)  ## Separate sampling schemes depending on covariate values dt.doses <- NMcreateDoses(TIME=data.table(regimen=c(\"SD\",\"MD\",\"MD\"),TIME=c(0,0,12)),AMT=10,CMT=1)  seq.time.sd <- data.table(regimen=\"SD\",TIME=seq(0,6)) seq.time.md <- data.table(regimen=\"MD\",TIME=c(0,4,12,24)) seq.time <- rbind(seq.time.sd,seq.time.md)  addEVID2(dt.doses,time.sim=seq.time,CMT=2) #>    ID TIME EVID CMT AMT MDV regimen DV #> 1   1    0    1   1  10   1      SD NA #> 2   1    0    2   2  NA   1      SD NA #> 3   1    1    2   2  NA   1      SD NA #> 4   1    2    2   2  NA   1      SD NA #> 5   1    3    2   2  NA   1      SD NA #> 6   1    4    2   2  NA   1      SD NA #> 7   1    5    2   2  NA   1      SD NA #> 8   1    6    2   2  NA   1      SD NA #> 9   2    0    1   1  10   1      MD NA #> 10  2    0    2   2  NA   1      MD NA #> 11  2    4    2   2  NA   1      MD NA #> 12  2   12    1   1  10   1      MD NA #> 13  2   12    2   2  NA   1      MD NA #> 14  2   24    2   2  NA   1      MD NA"},{"path":"https://philipdelff.github.io/NMsim/reference/addResVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Add residual variability based on parameter estimates — addResVar","title":"Add residual variability based on parameter estimates — addResVar","text":"Add residual variability based parameter estimates","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addResVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add residual variability based on parameter estimates — addResVar","text":"","code":"addResVar(   data,   path.ext,   prop = NULL,   add = NULL,   log = FALSE,   par.type = \"SIGMA\",   trunc0 = TRUE,   scale.par,   subset,   seed,   as.fun )"},{"path":"https://philipdelff.github.io/NMsim/reference/addResVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add residual variability based on parameter estimates — addResVar","text":"data data set containing indiviudual predictions. Often result NMsim. path.ext Path ext file take parameter estimates . prop Parameter number parameter holding variance proportional error component. ERR(1) used proportional error, use prop=1. Can also refer theta number. add Parameter number parameter holding variance additive error component. ERR(1) used additive error, use add=1. Can also refer theta number. log error added log scale? used obtain exponential error distribution. par.type Use \"sigma\" variances estimated SIGMA matrix. Use \"theta\" THETA parameters used. See `scale.par` . trunc0 log=FALSE, truncate simulated values 0? trunc0, returned predictions can negative. scale.par Denotes parmeter represents variance standard deviation. Allowed values default value depends `par.type`. par.type=\"sigma\" \"var\" allowed. par.type=\"theta\" allowed values \"sd\" \"var\". Default \"sd\". subset character string expression denoting subset add residual error. Example: subset=\"DVID==''\" seed number pass set.seed() simulating. Default generate seed report console. Use seed=FALSE avoid setting seed (prefer otherwise). .fun default return data data.frame. Pass function (say tibble::as_tibble) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/callArgs.html","id":null,"dir":"Reference","previous_headings":"","what":"get arguments passed to a function — callArgs","title":"get arguments passed to a function — callArgs","text":"Within function, run callArgs get list arguments passed function.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/callArgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get arguments passed to a function — callArgs","text":"","code":"callArgs(which = -1)"},{"path":"https://philipdelff.github.io/NMsim/reference/callArgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get arguments passed to a function — callArgs","text":"number environment levels move. Default 1 means result concerns function/environment callArgs() executed.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/callArgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get arguments passed to a function — callArgs","text":"List arguments","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/callArgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get arguments passed to a function — callArgs","text":"","code":"funfoo <- function(a,b){   NMsim:::callArgs() } funfoo(a=1) #> $a #> [1] 1 #>"},{"path":"https://philipdelff.github.io/NMsim/reference/callNonmemDirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate system command to call Nonmem directly — callNonmemDirect","title":"Generate system command to call Nonmem directly — callNonmemDirect","text":"Generate system command call Nonmem directly","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/callNonmemDirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate system command to call Nonmem directly — callNonmemDirect","text":"","code":"callNonmemDirect(file.mod, path.nonmem)"},{"path":"https://philipdelff.github.io/NMsim/reference/digestElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive digests of argument values or their contents — digestElements","title":"Derive digests of argument values or their contents — digestElements","text":"Get digests argument values. Optionally, functions can run arguments calculating digests. example reading contents file file path argument.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/digestElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive digests of argument values or their contents — digestElements","text":"","code":"digestElements(obj, funs)"},{"path":"https://philipdelff.github.io/NMsim/reference/digestElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive digests of argument values or their contents — digestElements","text":"obj object elements run digest . funs Named list functions applied elements (matched names) `obj`. Optional.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/digestElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive digests of argument values or their contents — digestElements","text":"data.table hashes/checksums.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/dtapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply function and return a data.table — dtapply","title":"Apply function and return a data.table — dtapply","text":"convenience function returns data.table column representing input values column results. still experimental work many input structures.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/dtapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply function and return a data.table — dtapply","text":"","code":"dtapply(X, FUN, ...)"},{"path":"https://philipdelff.github.io/NMsim/reference/dtapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply function and return a data.table — dtapply","text":"... arguments passed lapply","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/dtapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply function and return a data.table — dtapply","text":"","code":"NMsim:::dtapply(setNames(1:4,letters[1:4]),sqrt) #>    name      res #> 1:    a 1.000000 #> 2:    b 1.414214 #> 3:    c 1.732051 #> 4:    d 2.000000"},{"path":"https://philipdelff.github.io/NMsim/reference/findUpdated.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter control streams to only those updated since last run — findUpdated","title":"Filter control streams to only those updated since last run — findUpdated","text":"Filter control streams updated since last run","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/findUpdated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter control streams to only those updated since last run — findUpdated","text":"","code":"findUpdated(mods)"},{"path":"https://philipdelff.github.io/NMsim/reference/findUpdated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter control streams to only those updated since last run — findUpdated","text":"lstsd list (input output) control streams consider","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/inputArchiveDefault.html","id":null,"dir":"Reference","previous_headings":"","what":"Default location of input archive file — inputArchiveDefault","title":"Default location of input archive file — inputArchiveDefault","text":"Default location input archive file","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/inputArchiveDefault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default location of input archive file — inputArchiveDefault","text":"","code":"inputArchiveDefault(file)"},{"path":"https://philipdelff.github.io/NMsim/reference/inputArchiveDefault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default location of input archive file — inputArchiveDefault","text":"file Path input output control stream.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/needRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine whether re-run of a function is necessary — needRun","title":"Determine whether re-run of a function is necessary — needRun","text":"Compares arguments stored checksums output functions . changes found, function re-run.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/needRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine whether re-run of a function is necessary — needRun","text":"","code":"needRun(path.res, path.digest, funs, which = -2)"},{"path":"https://philipdelff.github.io/NMsim/reference/needRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine whether re-run of a function is necessary — needRun","text":"path.res Path function results output file path.digest Path file containing digests compare . funs Named list functions apply arguments Number environment levels jump evaluate arguments","code":""}]
