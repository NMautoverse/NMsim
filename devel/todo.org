#+PROPERTY: LOGGING nil
* NMsim todo
** general

*** model object structure

#+begin_src R
  ### mod
### ext
#+end_src



*** CANCELED Warn against method.execute="nmsim" for NMexec directly

*** CANCELED Disable method.update.inits="nmsim". 
Wrote NMcreateMatLines instead which uses BLOCK structures as
needed. I was concerned if VarCov is similarly affected
*** pkgdown

*** DONE Fork NMwriteSection from NMdata

*** DONE Vignette: Get started

**** Explain Nonmem is needed.

**** How to use psn and not.

***** execution

***** Updating parameter initial values

**** Benefits/downsides of different methods

*** TODO [#B] Vignette: How NMsim works

**** Automates data handling and calls Nonmem

**** The steps done by NMsim - and the order of them

**** Writing new methods

*** DONE path.mod.exec Include path to where Nonmem is executed in model table 
can be used to find PRDERR or other debug info.
*** TODO New function to apply time-varying covariates

** expandCovs
** NMexec
*** DONE Move selection of method.execute from NMsim
Now that method.execute="nmsim" works for general execution, it should
be default method on all systems, and there is no reason why NMsim
handles this differently than NMexec.
*** DONE if using path.nonmem, test that it exists
*** DONE Check for existence of input data
Currently, we get an error from NMscanInput. It would be clearer if
this was checked by NMexec as a prerequisite.
*** DONE Move existing results files to backup before running nonmem
*** CANCELED Rename sge to parallel/cluster?
It means if we send to the cluster. There is a slight difference of
the implication in NMexec and NMsim. In NMexec, if we send to cluster
the default is to parellellize each job on nc=64 cores or threads. In
NMsim we default to nc=1.
** NMexecDirectory
*** DONE Clean up after switching to absolute paths
** NMreadExt - Integrated in NMdata
*** CANCELED Include model column same way as NMscanData
*** CANCELED Support multiple files
*** CANCELED Intro arg return
Align with NMdata
** NMreadSim
*** TODO [#A] byvars must exist
when reading tables from inside the meta data table, what meta data
variables are depends on the NMsim version that created the
metadata. Instead, they may be available in the results in older
versions. Therefore, if they are not avaialble in meta data, just
don't include them in byvars.
*** TODO [#A] Allow NMreadSim to overrule fast.tables and carry.out
Not sure about this one.
*** DONE Test reading of ModTab tables with repeated rds files
*** Structure
**** description of x argument
main arg is x - a flexible object that contains
- data
- paths to fst containing data
- NMsimModTab info on what to read
- paths to rds files containing NMsimModTab

  x can be a list of these or a vector of paths
**** structure
***** partition x into x.data and x.tabs
***** stack or read and stack x.data into res.x
***** combine x.tabs into tab.paths by reading and stacking
****** Wait on lsts if needed/requested
****** Read models from tab.paths and stack into res.tabs
***** Stack res.data and res.tabs into res.all

*** DONE Argument for path to dir.sims
Currently, the sim results must be in the same path relative to the
results files as specified when running NMsim.
*** DONE Support transform
It used to be done in NMsim. But it has to be a list in each row of
the NMsimTab object specifying what to transform. Then do someting
like this.

#+begin_src R
else if(!is.null(transform)){
## optionally transform results like DV, IPRED, PRED
for(name in names(transform)){
simres.n[,(name):=transform[[name]](get(name))]
}
#+end_source
*** DONE Support changing paths after running NMsim
reading is built on relative paths to wd when NMsim was run. They will
have to be based on dir.res?
** NMseed
Purpose: Add seeds to $SIM

I don't think we will need to interpret existing SIM. The user will
have to supply what dists are needed.
*** DONE Make sure NMsim uses seed and args.seed meaningfully mean

** NMsim

*** TODO Look for not allowed columns in data
    cols.not.allowed <- cc(
        CPREDI, CRESI, CWRES, CWRESI,
        PRED, RES, WRES,
        NPDE)

    cols.not.allowed <- c(cols.not.allowed,colnames(data.inp)[grepl("ETA*[1-9][0-9]*",colnames(data.inp))])

    cols.rm <- intersect(colnames(data.inp),cols.not.allowed)
    if(length(cols.rm)){
        data.inp[,(cols.rm):=NULL]
    }

*** DONE Likely bug (was not)

The reason for the following is that  seed refers to dt.models[,seed], not the argument called seed

I don't understand why this line is here. NMseed seems to have taken care of this already:

section.sim <- sub("(SIM(ULATION)*( +ONLYSIM(ULATION)*)*) *",paste("\\1",seed),section.sim)

*** DONE Make inits(method="nmsim") default 
*** DONE table.format argument
If number of rows is >1M I think the default format may be insufficient

Should col.row be divided by 1000. That would make it start at 0.001
meaning that up to 1B rows can be handled. But is it robust enough for
merging?

*** DONE Include row counter in input data - merge by it

**** DONE put the name of row counter in meta data

**** DONE Add it to all output tables

**** DONE have NMreadTabFast merge by it

**** DONE have NMscanData merge by it

**** DONE Remove it from results

*** DONE recover.input -> carry.out

*** DONE add NMREP code and TABLE variable if subproblems is used
*** DONE nmrep argument
*** TODO [#A] clean up meta data
**** Get rid of ROWMODEL2
**** name.mod or run.mod. What is the difference?
This is called model in output
*** DONE include fast.tables column in meta data
*** TODO Only paste lst bottom if tables not found
If not, it is probably an issue reading the data?
*** TODO Look for PRDERR in lst
Look for this
THERE ARE ERROR MESSAGES IN FILE PRDERR
if found, paste top of PRDERR file

Next step is look for this:
 ATTEMPT TO COMPUTE 0**POWER WITH POWER<=0.
If found, we can look for ** or ^ in control stream

If individuals and data points are mentioned, we could look those up in data:
0INDIVIDUAL NO.       1   ID= 1.80000000000000E+01   (WITHIN-INDIVIDUAL) DATA REC NO.   2
**** attempt1

file.prderr <- attributes(simres)$NMsimModTab[,file.path(dirname(path.mod.exec),"PRDERR")]
if(file.exists(file.prderr)){
    cat(
        paste(paste(readLines(file.prderr),collapse="\n"),"\n\n")
    )
}
**** next step
mod.exec <- readLines(path.mod.exec,warn=FALSE)
mod.exec[grepl("\\*\\*",mod.exec)]
mod.exec[grepl("V2",mod.exec)]
dims(simres,dt.sim)


*** DONE When adding seed and SUBPROBLEMS, only add once
If $SIMULATION spans more than one line, this is currently pasted repeatedly
*** DONE Drop NMsim from file names
In NMsim(), it happens here:
#+begin_src R
dt.models[,fn.sim:=fnExtension(paste0("NMsim_",name.mod),".mod")]
#+end_source
*** CANCELED Include name.model argument
Often one will want to give a vector of model names to easily label the models in the output

This can be done by naming the file.mod vector 
*** TODO [#B] skip fst option
*** DONE Returning NULL when it should error
The test "basic - a model that fails on NMTRAN" has NMsim wait for a
model that fails and can't read the results. Since it's waiting and
can't return results it should be an error.
*** TODO [#A] Avoid (OBSERVATIONS ONLY)
That has to be dropped from $ERROR sections by default

Currently, the user is warned about the existence
*** CANCELED avoid PRED_IGNORE_DATA_TEST==1
This is cancelled because we merge by a row identifier. PRED_IGNORE_DATA_TEST should be supported.


In $PK. Example
; include study 4 even though ANP3AC=0
IF(PRED_IGNORE_DATA_TEST==1) THEN
PRED_IGNORE_DATA=0
IF(ANP3AC.NE.1.AND.STUDY.NE.4) PRED_IGNORE_DATA=1
RETURN ;Assures no additional computation code in INFN is executed
ENDIF

*** DONE Add NMsim version and date to table
*** DONE No spaces in .mod files
See test_manual "list of data sets - spaces in data names"
*** DONE More useful error than the NMscanTables error
*** DONE Tell more than "Writing"
*** DONE dir.res should not be needed when file.res is provided
*** DONE Create only one rds per .mod
*** DONE Should invisibly return the table of models
*** DONE NMorderColumns must also be appied if data is a list
*** DONE Save dt of models
Can be used to read all results later. And see what has been done in
the individual runs.
*** TODO [#A] Work with output control streams
At least be able to identify and throw error
*** DONE BUG in handling no data
It must add col.row to output table. And NMscanData arguments
collected dont seem to be used when running NMscanData.
*** DONE option to clean temp dirs
*** DONE Support list of data sets
*** DONE Function to read and save results
And clean up?
*** DONE Support args.NMscanData 
*** DONE Split text.table into table.vars and table.options
**** DONE table.options="NOPRINT NOAPPEND" should be default - at least
There is one to avoid repeated writing of TABLE NO in table files too
that can be included to speed up fread.
*** DONE Remove documentation of type.mod
It has no effect in model
*** DONE Remove type.mod from documentation too
*** DONE If PSN is not available, make method.update.inits="nmsim"
*** DONE Limit seed function to what Nonmem can use
0:2147483647
*** DONE save data fewer times
Save only for each unique path.data. Merge in the nmtext somehow? It's
a list so it's not that simple.
*** DONE Delete existing results prior to running
It does for single simulations. But when spawning mutiple inside a
folder it does not. It should by default delete everything.
*** DONE Support for modifications to control stream(s).
Like insert lines to $PK or $ERROR. The best would be to extend
NMwriteSection to support a function as argument. Then it would be like
list(PK=function(text) c(text,"KA=KA*KASCALE"))
or something like that
*** DONE Check for existance of estimate files
NMsim will run even if only .mod exists. But it is natural to expect
the model estimate to be used. Hence, checks for existence of at least
.ext file should be done. Issue warning if something missing. 
**** DONE What if .phi or others needed?
**** DONE Check for existence of ext file before attempting parameter initial vals update
*** DONE Support method.sim="asis" for doing nothing to the control stream.
*** DONE Support additional args to methods
For now, ellipses used
*** DONE Support submitting jobs to queue system
*** DONE Go through selection of execution method
**** DONE all columns which names start by file.needed used
*** CANCELED Use dt list elements for multiple files.needed
*** DONE Use meaningful by in execute part
*** DONE Modularize simulation methods
**** DONE Handle seed and subproblems outside modules
**** DONE How to handle replace.sim?
Only be available for the default method. In fact, method.sim="asis"
may be what the user wants.
*** DONE Support simulation of new models from covariance step
method.sim="VarCov"
*** DONE path.mod should be file.mod
Or files?
To align with argument naming in NMdata

Decided to call it file.mod. file.mod indicates that an input control
stream is wanted. For NMscanData, files makes sense because it will
work on both input and output control streams.
*** DONE If path.nonmem is not supplied, use psn?
*** TODO [#B] Fix broken reuse.results
**** DONE First step is to just trust saved results and read them if reuse.results=TRUE.
If not, just return a vector of rds files.
*** DONE Reduce number of needed arguments
**** DONE seed
**** DONE suffix.sim
*** DONE Use NMdataConf for dir.psn and path.nonmem
*** DONE reuse.results should not depend on itself
*** DONE Create simulations dir if create.dir=TRUE
If not, throw error if dir.sim does not exist
*** DONE Support non-data.table workflows
**** DONE use NMdata's as.fun
*** DONE Rename type.input to type.mod
*** CANCELED Revise input data paths
This is for now resolved with dir.sims and dir.res

Currently, NMsimData... goes together with NMsim....  It would be
better for svn if the first part of the filenames were aligned. Also,
do we need to archive input data as _input as well in this case?
**** DONE should _input.rds be read by NMsim?
Now it should use the archived input
*** DONE Test if control stream exists
The error used to come from NMextractDataFile which is not intuitive
to the user. Now a check is included in both NMexec and NMsim.
*** DONE support multiple models
*** DONE arg for transformation of sim results
*** DONE Arg to control whether simulation is run
sometimes one may want to do a different simulation than the
standard - say with PSN sse. In that case one still want the sim to be
configured but not run.
*** DONE Support abbreviations
$COV $COVARIANCE $EST $ESTIMATION $SIM $SIMULATION

Maybe this should be done in NMwriteSection/NMreadSection instead.
*** DONE Support using a ready-made sim model
No modifications needed to control stream except $INPUT and $TABLE
*** DONE Improve reuse.results
to method to compare all arguments to what's on file

The implementation compares all explicitly given arguments. E.g. if
a=1 by default and it was explicitly given in previous run but not in
the new one, it will be a difference.
*** DONE Support multiple $TABLE blocks
*** DONE Dont allow / in name.sim
or at least drop them when generating file names from it
*** TODO [#A] auto set PD if many input variables
** VPC sims - no new method needed

*** CANCELED If adding ROW, dont add column names
issue is if people use ignore=C then after adding ROW to the column
names, the column names will be read as data.

*** DONE character columns with =DROP seem to break it
I believe this is fixed. In VPC model we now use trunc.csv.as.nm=FALSE

list(na=".",quote=FALSE,row.names=FALSE,scipen=0,col.names=TRUE)
*** DONE By default, reuse $INPUT and $DATA sections, with updated data path
Normally, one would simply reuse the estimation input data set for this
*** DONE NMsim needs to not handle $DATA section if data=NULL
**** NMscanData should ideally merge.by.row to allow for custom IGN/ACCEPT statements
But what if there is no row counter in input data? Read data, add a
row counter and otherwise resave data without any modifications. Add
row counter in $INPUT.

Or we read and write data applying filters? But that has limitations
to what filters are supported.
*** Use NMsim_default for VPC's
The vpc sim is about sim of the orig dataset with SUBPROBLEM
** NMsim_known
*** TODO [#B] throw error if no subjects are found in phi
** NMsim_typical
*** CANCELED Use $ETAS rather than $OMEGA
Just repeat 0 for as many ETAS as used
$ETAS 0 0 0 
https://nmhelp.tingjieguo.com/$etasphis.htm
** NMsim_VarCov
*** DONE Issue with varCov for n=1 repetitions.
As if submodel structure does not support n=1. For now, just give an
error to avoid some weird message.
** NMcreateDoses
*** DONE Wrong replicates in some cases
This bug was fixed by including unique before egdt here:
#+begin_src R
  egdt(
    melt(elem,measure.vars=name)
   ,
    unique(combs[,setdiff(names(combs),names(elem)),with=FALSE])
   ,quiet=T)
#+end_src
this is supposed to return 4 doses, not 8
#+begin_src R
  dt.amt.13 <- data.table(DOSE1=c(100))[,AMT:=DOSE1*1000]
  dt.time.13 <- data.table(TIME=c(0,288,0,432),trtp=rep(c("VX-548 - VX-548 + Omeprazole","VX-548 - VX-548 + Rifampin"),each=2))
  dt.dos.13 <- NMcreateDoses(TIME=dt.time.13,AMT=dt.amt.13)
  dt.dos.13[,ID:=NULL]
#+end_src
*** DONE No CMT by default?
Not all models use CMT so it shouldnt be required

This is done by CMT=NA for now
*** DONE II and ADDL should be separate args
Check that they are of equal length
*** DONE II/ADDL should only be applied to last event.
addl.lastonly argument
*** DONE TIME must be full length
## NMcreateDoses(TIME=c(0,1,4),AMT=c(2,1,4,2))
## NMcreateDoses(TIME=c(0,1,4),AMT=c(2,1,4,2),CMT=1)
*** DONE a NA value of an arg should drop the column
*** TODO if a cov is found in multiple arguments, it must span same values
Not sure if true
*** DONE Should CMT have a default? Or be required?
For now, required

*** TODO avoid hard coding variable names

*** TODO N is another arg
If ID not in covs, everything is replicated. It can be a data.table
too, meaning that we replicate within covariates. Maybe we have to be
able to use a known set of ID's and covs? Or use ID?
@param ID ID's to replicate for. Default is 1. Use NULL to omit.

*** DONE col.id column
col.id=NA will drop ID if there is only one set of doses (one set of cov values).

** addEVID2

*** TODO [#A] merge in from 6a22e88
*** DONE Change name to NMsample()

*** DONE [#A] Support DV
If DV is not NA or 0, set MDV=0

*** DONE Argument to set EVID value

*** TODO Order the same way as NMdata::addTAPD?
currently, addEVID2 does not order rows after adding simulation records
** plain nonmem run
*** DONE Create dir, Copy files into it
Called NMexecDirectory
** DONE NMupdateInitsFix
New function that fixes THETA, OMEGA, SIGMA based on ext.
With this, there is no dependency on PSN 
** Residual variability with nonmem
IF (ICALL.EQ.4) THEN
DV=Y
ENDIF
** addResidVar
*** DONE Make sure data is not edited
*** DONE col.ipre and col.iprevar
*** TODO Support custom errors functions
** rbind.NMsimRes
*** DONE bug in infite recursive calc
The lapply(....,unNMsimRes) does not seem to work. The next call to
rbind still gets rbind.NMsimRes. Would it be better to run unNMsimRes
in a loop?
** NMwriteInits
*** TODO [#B] Support using NMreadParsText() variables
NMwriteInits(file.mod,values=list("theta"=list(symbol="CL",init=3)))
*** TODO [#B] Support ext format
trying to update from an ext object. But below, the handling of
`inits` may wipe lower, upper, and fix - not sure. So I think it would
be better to translate ext to the inits format, and then merge the two
inits objects. ext should be allowed to contain fix, lower and
upper. Remember also, ext may contain multiple estimates (`model`
column?)
